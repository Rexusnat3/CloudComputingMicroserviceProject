# GitHub Actions CI/CD Pipeline for AWS Academy/Limited Permissions
name: FastAPI Limited Permissions CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  AWS_DEFAULT_REGION: us-east-1
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Code Quality
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx flake8 black isort

    - name: Code formatting check (Black)
      run: black --check . || echo "Code formatting issues found - run 'black .' to fix"

    - name: Import sorting check (isort)
      run: isort --check-only . || echo "Import sorting issues found - run 'isort .' to fix"

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Create and run tests
      run: |
        mkdir -p tests
        if [ ! -f "tests/test_main.py" ]; then
          cat > tests/test_main.py << 'EOF'
        from fastapi.testclient import TestClient
        from Main import app
        
        client = TestClient(app)
        
        def test_route_endpoint():
            response = client.get("/route/")
            assert response.status_code == 200
            assert response.json() == {"message": "endpoint functions succesfully"}
        
        def test_docs_endpoint():
            response = client.get("/docs")
            assert response.status_code == 200
            
        def test_openapi_endpoint():
            response = client.get("/openapi.json")
            assert response.status_code == 200
        EOF
        fi
        pytest tests/ -v

  # Build Docker Image (GitHub Container Registry)
  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name test-container ${{ steps.meta.outputs.tags }}
        sleep 10
        curl -f http://localhost:8000/docs || exit 1
        curl -f http://localhost:8000/route/ || exit 1
        docker stop test-container
        echo "Docker image tested successfully"

  # Deploy to AWS (Limited Operations Only)
  deploy-prep:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials (if available)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
      continue-on-error: true

    - name: Generate deployment files
      run: |
        echo "Generating deployment files for manual deployment..."
        
        # Create deployment script
        cat > deploy-to-aws.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Configuration
        AWS_REGION="us-east-1"
        AWS_ACCOUNT_ID="637423569688"
        ECR_REPOSITORY="fastapi-app"
        IMAGE_TAG="latest"
        CLUSTER_NAME="fastapi-cluster"
        SERVICE_NAME="fastapi-service"
        TASK_DEFINITION="fastapi-task"
        
        echo "🔧 Starting AWS deployment process..."
        
        # Step 1: Create ECR repository (if it doesn't exist)
        echo "📦 Creating ECR repository..."
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION 2>/dev/null || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
        
        # Step 2: Build and push Docker image
        echo "🐳 Building and pushing Docker image..."
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
        
        echo "Docker image pushed successfully!"
        echo "Image URI: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG"
        
        # Step 3: Create task definition JSON
        echo "Creating ECS task definition..."
        cat > task-definition.json << EOFTASK
        {
          "family": "$TASK_DEFINITION",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/LabRole",
          "containerDefinitions": [
            {
              "name": "fastapi-container",
              "image": "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG",
              "portMappings": [
                {
                  "containerPort": 8000,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/$TASK_DEFINITION",
                  "awslogs-region": "$AWS_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOFTASK
        
        echo "Task definition created: task-definition.json"
        echo "Deployment files ready! You can now run the deployment manually in AWS CloudShell or EC2."
        EOF
        
        chmod +x deploy-to-aws.sh

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: aws-deployment-files
        path: |
          deploy-to-aws.sh
          Dockerfile
          requirements.txt
          Main.py
          Routers/

    - name: Deployment Instructions
      run: |
        echo "🚀 FastAPI Deployment Ready!"
        echo "================================"
        echo ""
        echo "Your Docker image is available at:"
        echo "${{ needs.build.outputs.image-tag }}"
        echo ""
        echo "To deploy to AWS (run in AWS CloudShell):"
        echo "1. Download the deployment artifacts from this workflow"
        echo "2. Upload them to AWS CloudShell"
        echo "3. Run: chmod +x deploy-to-aws.sh && ./deploy-to-aws.sh"
        echo ""
        echo "Alternative: Pull and run the image directly:"
        echo "docker pull ${{ needs.build.outputs.image-tag }}"
        echo "docker run -p 8000:8000 ${{ needs.build.outputs.image-tag }}"
        echo ""
        echo "Your FastAPI docs will be available at: http://your-server:8000/docs"

  # Manual Deployment Instructions
  manual-deploy-guide:
    runs-on: ubuntu-latest
    needs: [build, deploy-prep]
    if: always()

    steps:
    - name: Create Manual Deployment Guide
      run: |
        cat > DEPLOYMENT_GUIDE.md << 'EOF'
        # 🚀 FastAPI AWS Deployment Guide
        
        ## Option 1: Using AWS CloudShell (Recommended)
        
        1. **Open AWS CloudShell** in your AWS Console
        2. **Clone your repository:**
           ```bash
           git clone https://github.com/YOUR_USERNAME/CloudComputingProject.git
           cd CloudComputingProject
           ```
        
        3. **Run the deployment script:**
           ```bash
           chmod +x deploy-to-aws.sh
           ./deploy-to-aws.sh
           ```
        
        ## Option 2: Using Docker Hub (No AWS restrictions)
        
        Your image is also available on GitHub Container Registry:
        ```bash
        docker pull ghcr.io/YOUR_USERNAME/cloudcomputingproject:latest
        docker run -p 8000:8000 ghcr.io/YOUR_USERNAME/cloudcomputingproject:latest
        ```
        
        ## Option 3: Local Development
        
        ```bash
        git clone https://github.com/YOUR_USERNAME/CloudComputingProject.git
        cd CloudComputingProject
        pip install -r requirements.txt
        uvicorn Main:app --host 0.0.0.0 --port 8000
        ```
        
        ## Testing Your Deployment
        
        Once deployed, test these endpoints:
        - **API Docs:** http://your-server:8000/docs
        - **Your Route:** http://your-server:8000/route/
        - **Health Check:** http://your-server:8000/openapi.json
        
        ## Next Steps
        
        1. Set up a load balancer for production
        2. Configure domain name and SSL
        3. Set up monitoring and logging
        4. Implement CI/CD with proper AWS permissions
        EOF
        
        echo "Deployment guide created!"
        cat DEPLOYMENT_GUIDE.md

    - name: Upload deployment guide
      uses: actions/upload-artifact@v3
      with:
        name: deployment-guide
        path: DEPLOYMENT_GUIDE.md